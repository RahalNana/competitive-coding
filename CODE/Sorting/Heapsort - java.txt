	public static int heapSize = 0;
	
	public static int left(int i)
	{
		return 2*i+1;
	}
	
	public static int right(int i)
	{
		return 2*i+2;
	}
	
	public static int parent(int i)
	{
		return (i-1)/2;
	}
	
	public static void buildMaxHeap(int[] arr)
	{
		int n = arr.length;
		heapSize = n;
		for(int x = parent(n-1); x>=0; x--)
			maxHeapify(arr, x);
	}
	
	public static void maxHeapify(int[] arr, int i)
	{
		int largest = i;
		if (left(i)<heapSize && arr[left(i)]>arr[largest])
			largest = left(i);
		if (right(i)<heapSize && arr[right(i)]>arr[largest])
			largest = right(i);
		if (largest!=i)
		{
			int val = arr[largest];
			arr[largest] = arr[i];
			arr[i] = val;
			maxHeapify(arr, largest);
		}
	}
	
	//Call this function on Array
	public static int[] heapsort(int[] arr)
	{
		buildMaxHeap(arr);
		for(int x=arr.length-1; x>0; x--)
		{
			int val = arr[x];
			arr[x] = arr[0];
			arr[0] = val;
			heapSize--;
			maxHeapify(arr, 0);
		}
		return arr;
	}