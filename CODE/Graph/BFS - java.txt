//weight of edge is 6!!!!!!!!!!!!1111
    public static class Node
    {
        int dist, id;
        boolean visited;
        ArrayList<Node> adj;

        public Node(int id)
        {
            this.id = id;
            visited = false;
            dist = -1;
            adj = new ArrayList<Node>();
        }

        public void link(Node node)
        {
            adj.add(node);
        }
    }

    static int[] bfs(int n, int m, int[][] edges, int s) 
    {
        //creates adjacecny array of nodes and fills it in with blank nodes
        Node[] nodes = new Node[n];
        for(int i=0; i<n; i++) nodes[i] = new Node(i);

        //build adjacency array from edge data
        for(int i=0; i<m; i++)
        {
            nodes[edges[i][0]-1].link(nodes[edges[i][1]-1]);
            nodes[edges[i][1]-1].link(nodes[edges[i][0]-1]);
        }

        //initiate BFS
        LinkedList<Node> queue = new LinkedList<Node>();
        nodes[s-1].visited = true;
        nodes[s-1].dist = 0;
        queue.add(nodes[s-1]);
        Node currNode;
        
        //BFS
        while(queue.size()!=0)
        {
            currNode = queue.pop();
            for(Node adjNode : currNode.adj) if(!adjNode.visited)
            {
                adjNode.visited = true;
                adjNode.dist = currNode.dist+6;
                queue.add(adjNode);
            }
        }

        //returns distances in order of node ID
        int[] dist = new int[n-1];
        int i=0, j=0;
        while (i<n)
        {
            if (i==s-1) i++;
            else
            {
                dist[j] = nodes[i].dist;
                i++;
                j++;
            }
        }
        return dist;
    }