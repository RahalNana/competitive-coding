    static class Node implements Comparable<Node>
    {
        int id, hid;
        Long dist;
        HashMap<Node,Integer> adj = new HashMap<Node,Integer>();
        Node parent;

        Node(int id)
        {
            this.id = id;
            hid = id;
            dist = 0l+Integer.MAX_VALUE;
        }

        void link(Node n, int w)
        {
            if(!adj.containsKey(n) || w<adj.get(n))
                adj.put(n,w);
        }

        public int compareTo(Node n)
        {
            return dist.compareTo(n.dist);
        }
    }

    public static class MinHeap<T extends Node> extends ArrayList<T>
    {
        public MinHeap(List<T> list)
        {
            super(list);
            for(int x=parent(size()-1); x>=0; x--)
                heapify(x);
        }

        public static int parent(int i)
        {
            return (i-1)/2;
        }

        public static int left(int i)
        {
            return 2*i+1;
        }   

        public static int right(int i)
        {
            return 2*i+2;
        }

        public void swap(int i, int j)
        {
            get(i).hid = j;
            get(j).hid = i;
            T temp = get(i);
            set(i, get(j));
            set(j, temp);
        }

        public void heapify(int i)
        {
            int index = i;
            T smallest = get(i);
            if(left(i)<size() && get(left(i)).compareTo(smallest)<0)
            {
                index = left(i);
                smallest = get(left(i));
            }
            if(right(i)<size() && get(right(i)).compareTo(smallest)<0)
            {
                index = right(i);
                smallest = get(right(i));
            }
            if (index!=i)
            {  
                swap(index, i);
                heapify(index);          
            }
        }

        public void decrease(int i, long val)
        {
            if(val>get(i).dist) return;
            get(i).dist = val;
            while(get(i).compareTo(get(parent(i)))<0)
            {
                swap(i, parent(i));
                i = parent(i);
            }
        }

        public T extractMin()
        {
            swap(0, size()-1);
            T ans = remove(size()-1);
            if(size()!=0) heapify(0);
            return ans;
        }
    }
    
    static void relax(MinHeap<Node> min, Node u, Node v)
    {
        if (v.dist>u.dist+u.adj.get(v))
        {
            min.decrease(v.hid,u.dist+u.adj.get(v));
            v.parent = u;
        }
    }

    static void dijkstra(List<Node> nodes, int s) 
    {
        nodes.get(s).dist = 0l;
        //constructs min priority queue
        MinHeap<Node> min = new MinHeap<Node>(nodes);
        Node curr;
        while(min.size()>0)
        {
            curr = min.extractMin();
            for(Node adjNode : curr.adj.keySet())
                relax(min,curr,adjNode);
        }
    }