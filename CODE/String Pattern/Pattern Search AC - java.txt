    static class Vertex
	{
		int index;
		char c;
		boolean isLeaf = false;
		int wordID=-1;
		HashMap<Character,Vertex> children = new HashMap<Character,Vertex>();
		Vertex parent;
		Vertex failure;
		Vertex leafLink;
		
		Vertex(){}
		
		Vertex(int index)
		{
			this.index = index;
		}
		
		Vertex(int index, char c)
		{
			this.index = index;
			this.c = c;
		}
	}
	
	static class AhoCorasick
	{
		List<Vertex> trie = new ArrayList<Vertex>();
		String[] patterns;
		int nodes = 0;
		
		AhoCorasick(String[] patterns)
		{
			trie.add(new Vertex(0));
			nodes++;
			this.patterns = patterns;
			for(int x=0; x<patterns.length; x++) 
			{
				add(patterns[x],x);
			}
			constructFailures();
			leafLinks();
		}
		
		void add(String s, int wordID)
		{
			int currNode = 0;
			int len = s.length();
			for(int x=0; x<len; x++)
			{
				char c = s.charAt(x);
				if (trie.get(currNode).children.containsKey(c)) currNode = trie.get(currNode).children.get(c).index;
				else
				{
					trie.add(new Vertex(nodes,c));
					trie.get(nodes).parent = trie.get(currNode);
					trie.get(currNode).children.put(c, trie.get(nodes));
					currNode = nodes;
					nodes++;
				}
				if(x==len-1) 
				{
					trie.get(currNode).isLeaf=true;
					trie.get(currNode).wordID=wordID;
				}
			}
		}
		
		void constructFailures()
        {
        	trie.get(0).failure=trie.get(0);
        	LinkedList<Vertex> vQ = new LinkedList<Vertex>();
        	vQ.addAll(trie.get(0).children.values());
            here : while (vQ.size()>0)
            {
            	Vertex currV = vQ.remove();
            	vQ.addAll(currV.children.values());
            	
                if (currV.parent.index==0) currV.failure = trie.get(0);
                else
                {
                	Vertex chkNode = currV.parent.failure;
                	while (true) 
                	{
                		for(Vertex v : chkNode.children.values()) if (currV.c==v.c) 
                        {
                            currV.failure = v;
                            continue here;
                        }
                		if(chkNode.index==0)
                		{
                			currV.failure = trie.get(0);
                            continue here;
                		}
                		chkNode = chkNode.failure;
                    }
                }
            }
        }
		
		void leafLinks()
		{
			for(Vertex v : trie) if(v.index!=0 && v.parent.index!=0)
				v.leafLink = getLink(v);
		}
		
		Vertex getLink(Vertex v)
		{
			if (v.failure.isLeaf) return v.failure;
			if (v.failure.index==v.index) return null;
			return getLink(v.failure);
		}
		
		int[] getCount(String text)
		{
			int[] count = new int[patterns.length];
			Vertex currNode = trie.get(0);
			here : for(int x=0; x<text.length(); x++)
			{
				while(!currNode.children.containsKey(text.charAt(x)))
				{
					if(currNode.index==0) continue here;
					currNode = currNode.failure;
				}
				
				currNode = currNode.children.get(text.charAt(x));
				
				Vertex chkNode = currNode;
				
				if(currNode.isLeaf) count[currNode.wordID]+=1;
				
				while(true)
				{
					if(chkNode.leafLink==null) break;
					chkNode = chkNode.leafLink;
					count[chkNode.wordID]+=1;
				}
			}
			return count;
		}
	}
